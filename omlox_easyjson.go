// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package omlox

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo(in *jlexer.Lexer, out *WrapperObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Event).UnmarshalJSON(data))
			}
		case "topic":
			out.Topic = Topic(in.String())
		case "subscription_id":
			out.SubscriptionID = int(in.Int())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				in.Delim('[')
				if out.Payload == nil {
					if !in.IsDelim(']') {
						out.Payload = make([]json.RawMessage, 0, 2)
					} else {
						out.Payload = []json.RawMessage{}
					}
				} else {
					out.Payload = (out.Payload)[:0]
				}
				for !in.IsDelim(']') {
					var v1 json.RawMessage
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Payload = append(out.Payload, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(Parameters)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Params)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo(out *jwriter.Writer, in WrapperObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	if in.SubscriptionID != 0 {
		const prefix string = ",\"subscription_id\":"
		out.RawString(prefix)
		out.Int(int(in.SubscriptionID))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Payload {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Raw((v4).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Params) != 0 {
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Params {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WrapperObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WrapperObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WrapperObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WrapperObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo(l, v)
}
func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo1(in *jlexer.Lexer, out *WebsocketError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = ErrCode(in.Int())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo1(out *jwriter.Writer, in WebsocketError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebsocketError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebsocketError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebsocketError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebsocketError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo1(l, v)
}
func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo2(in *jlexer.Lexer, out *Trackable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "geometry":
			if in.IsNull() {
				in.Skip()
				out.Geometry = nil
			} else {
				if out.Geometry == nil {
					out.Geometry = new(Polygon)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Geometry).UnmarshalJSON(data))
				}
			}
		case "extrusion":
			out.Extrusion = float64(in.Float64())
		case "location_providers":
			if in.IsNull() {
				in.Skip()
				out.LocationProviders = nil
			} else {
				in.Delim('[')
				if out.LocationProviders == nil {
					if !in.IsDelim(']') {
						out.LocationProviders = make([]string, 0, 4)
					} else {
						out.LocationProviders = []string{}
					}
				} else {
					out.LocationProviders = (out.LocationProviders)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.LocationProviders = append(out.LocationProviders, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fence_timeout":
			(out.FenceTimeout).UnmarshalEasyJSON(in)
		case "exit_tolerance":
			out.ExitTolerance = float64(in.Float64())
		case "tolerance_timeout":
			(out.ToleranceTimeout).UnmarshalEasyJSON(in)
		case "exit_delay":
			(out.ExitDelay).UnmarshalEasyJSON(in)
		case "radius":
			out.Radius = float64(in.Float64())
		case "properties":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Properties).UnmarshalJSON(data))
			}
		case "locating_rules":
			if in.IsNull() {
				in.Skip()
				out.LocatingRules = nil
			} else {
				in.Delim('[')
				if out.LocatingRules == nil {
					if !in.IsDelim(']') {
						out.LocatingRules = make([]LocatingRule, 0, 2)
					} else {
						out.LocatingRules = []LocatingRule{}
					}
				} else {
					out.LocatingRules = (out.LocatingRules)[:0]
				}
				for !in.IsDelim(']') {
					var v7 LocatingRule
					easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo3(in, &v7)
					out.LocatingRules = append(out.LocatingRules, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo2(out *jwriter.Writer, in Trackable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Geometry != nil {
		const prefix string = ",\"geometry\":"
		out.RawString(prefix)
		out.Raw((*in.Geometry).MarshalJSON())
	}
	if in.Extrusion != 0 {
		const prefix string = ",\"extrusion\":"
		out.RawString(prefix)
		out.Float64(float64(in.Extrusion))
	}
	if len(in.LocationProviders) != 0 {
		const prefix string = ",\"location_providers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.LocationProviders {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if (in.FenceTimeout).IsDefined() {
		const prefix string = ",\"fence_timeout\":"
		out.RawString(prefix)
		(in.FenceTimeout).MarshalEasyJSON(out)
	}
	if in.ExitTolerance != 0 {
		const prefix string = ",\"exit_tolerance\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExitTolerance))
	}
	if (in.ToleranceTimeout).IsDefined() {
		const prefix string = ",\"tolerance_timeout\":"
		out.RawString(prefix)
		(in.ToleranceTimeout).MarshalEasyJSON(out)
	}
	if (in.ExitDelay).IsDefined() {
		const prefix string = ",\"exit_delay\":"
		out.RawString(prefix)
		(in.ExitDelay).MarshalEasyJSON(out)
	}
	if in.Radius != 0 {
		const prefix string = ",\"radius\":"
		out.RawString(prefix)
		out.Float64(float64(in.Radius))
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		out.Raw((in.Properties).MarshalJSON())
	}
	if len(in.LocatingRules) != 0 {
		const prefix string = ",\"locating_rules\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.LocatingRules {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo3(out, v11)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trackable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trackable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trackable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trackable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo2(l, v)
}
func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo3(in *jlexer.Lexer, out *LocatingRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expression":
			out.Expression = string(in.String())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo3(out *jwriter.Writer, in LocatingRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"expression\":"
		out.RawString(prefix[1:])
		out.String(string(in.Expression))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}
func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo4(in *jlexer.Lexer, out *LocationProvider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "sensors":
			if m, ok := out.Sensors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Sensors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Sensors = in.Interface()
			}
		case "fence_timeout":
			(out.FenceTimeout).UnmarshalEasyJSON(in)
		case "exit_tolerance":
			out.ExitTolerance = float64(in.Float64())
		case "tolerance_timeout":
			(out.ToleranceTimeout).UnmarshalEasyJSON(in)
		case "exit_delay":
			(out.ExitDelay).UnmarshalEasyJSON(in)
		case "properties":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Properties).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo4(out *jwriter.Writer, in LocationProvider) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Sensors != nil {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		if m, ok := in.Sensors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Sensors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Sensors))
		}
	}
	if (in.FenceTimeout).IsDefined() {
		const prefix string = ",\"fence_timeout\":"
		out.RawString(prefix)
		(in.FenceTimeout).MarshalEasyJSON(out)
	}
	if in.ExitTolerance != 0 {
		const prefix string = ",\"exit_tolerance\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExitTolerance))
	}
	if (in.ToleranceTimeout).IsDefined() {
		const prefix string = ",\"tolerance_timeout\":"
		out.RawString(prefix)
		(in.ToleranceTimeout).MarshalEasyJSON(out)
	}
	if (in.ExitDelay).IsDefined() {
		const prefix string = ",\"exit_delay\":"
		out.RawString(prefix)
		(in.ExitDelay).MarshalEasyJSON(out)
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		out.Raw((in.Properties).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocationProvider) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationProvider) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocationProvider) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationProvider) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo4(l, v)
}
func easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo5(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Position).UnmarshalJSON(data))
			}
		case "source":
			out.Source = string(in.String())
		case "provider_type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ProviderType).UnmarshalJSON(data))
			}
		case "provider_id":
			out.ProviderID = string(in.String())
		case "trackables":
			if in.IsNull() {
				in.Skip()
				out.Trackables = nil
			} else {
				in.Delim('[')
				if out.Trackables == nil {
					if !in.IsDelim(']') {
						out.Trackables = make([]uuid.UUID, 0, 4)
					} else {
						out.Trackables = []uuid.UUID{}
					}
				} else {
					out.Trackables = (out.Trackables)[:0]
				}
				for !in.IsDelim(']') {
					var v12 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v12).UnmarshalText(data))
					}
					out.Trackables = append(out.Trackables, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp_generated":
			if in.IsNull() {
				in.Skip()
				out.TimestampGenerated = nil
			} else {
				if out.TimestampGenerated == nil {
					out.TimestampGenerated = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimestampGenerated).UnmarshalJSON(data))
				}
			}
		case "timestamp_sent":
			if in.IsNull() {
				in.Skip()
				out.TimestampSent = nil
			} else {
				if out.TimestampSent == nil {
					out.TimestampSent = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimestampSent).UnmarshalJSON(data))
				}
			}
		case "crs":
			out.Crs = string(in.String())
		case "associated":
			out.Associated = bool(in.Bool())
		case "accuracy":
			if in.IsNull() {
				in.Skip()
				out.Accuracy = nil
			} else {
				if out.Accuracy == nil {
					out.Accuracy = new(float64)
				}
				*out.Accuracy = float64(in.Float64())
			}
		case "floor":
			out.Floor = float64(in.Float64())
		case "true_heading":
			if in.IsNull() {
				in.Skip()
				out.TrueHeading = nil
			} else {
				if out.TrueHeading == nil {
					out.TrueHeading = new(float64)
				}
				*out.TrueHeading = float64(in.Float64())
			}
		case "magnetic_heading":
			if in.IsNull() {
				in.Skip()
				out.MagneticHeading = nil
			} else {
				if out.MagneticHeading == nil {
					out.MagneticHeading = new(float64)
				}
				*out.MagneticHeading = float64(in.Float64())
			}
		case "heading_accuracy":
			if in.IsNull() {
				in.Skip()
				out.HeadingAccuracy = nil
			} else {
				if out.HeadingAccuracy == nil {
					out.HeadingAccuracy = new(float64)
				}
				*out.HeadingAccuracy = float64(in.Float64())
			}
		case "elevation_ref":
			if in.IsNull() {
				in.Skip()
				out.ElevationRef = nil
			} else {
				if out.ElevationRef == nil {
					out.ElevationRef = new(ElevationRefType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ElevationRef).UnmarshalJSON(data))
				}
			}
		case "speed":
			if in.IsNull() {
				in.Skip()
				out.Speed = nil
			} else {
				if out.Speed == nil {
					out.Speed = new(float64)
				}
				*out.Speed = float64(in.Float64())
			}
		case "course":
			if in.IsNull() {
				in.Skip()
				out.Course = nil
			} else {
				if out.Course == nil {
					out.Course = new(float64)
				}
				*out.Course = float64(in.Float64())
			}
		case "properties":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Properties).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo5(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix[1:])
		out.Raw((in.Position).MarshalJSON())
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"provider_type\":"
		out.RawString(prefix)
		out.Raw((in.ProviderType).MarshalJSON())
	}
	{
		const prefix string = ",\"provider_id\":"
		out.RawString(prefix)
		out.String(string(in.ProviderID))
	}
	if len(in.Trackables) != 0 {
		const prefix string = ",\"trackables\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.Trackables {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.RawText((v14).MarshalText())
			}
			out.RawByte(']')
		}
	}
	if in.TimestampGenerated != nil {
		const prefix string = ",\"timestamp_generated\":"
		out.RawString(prefix)
		out.Raw((*in.TimestampGenerated).MarshalJSON())
	}
	if in.TimestampSent != nil {
		const prefix string = ",\"timestamp_sent\":"
		out.RawString(prefix)
		out.Raw((*in.TimestampSent).MarshalJSON())
	}
	if in.Crs != "" {
		const prefix string = ",\"crs\":"
		out.RawString(prefix)
		out.String(string(in.Crs))
	}
	if in.Associated {
		const prefix string = ",\"associated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Associated))
	}
	if in.Accuracy != nil {
		const prefix string = ",\"accuracy\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Accuracy))
	}
	if in.Floor != 0 {
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Float64(float64(in.Floor))
	}
	if in.TrueHeading != nil {
		const prefix string = ",\"true_heading\":"
		out.RawString(prefix)
		out.Float64(float64(*in.TrueHeading))
	}
	if in.MagneticHeading != nil {
		const prefix string = ",\"magnetic_heading\":"
		out.RawString(prefix)
		out.Float64(float64(*in.MagneticHeading))
	}
	if in.HeadingAccuracy != nil {
		const prefix string = ",\"heading_accuracy\":"
		out.RawString(prefix)
		out.Float64(float64(*in.HeadingAccuracy))
	}
	if in.ElevationRef != nil {
		const prefix string = ",\"elevation_ref\":"
		out.RawString(prefix)
		out.Raw((*in.ElevationRef).MarshalJSON())
	}
	if in.Speed != nil {
		const prefix string = ",\"speed\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Speed))
	}
	if in.Course != nil {
		const prefix string = ",\"course\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Course))
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		out.Raw((in.Properties).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF70c4027EncodeGithubComWavecomtechOmloxClientGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF70c4027DecodeGithubComWavecomtechOmloxClientGo5(l, v)
}
